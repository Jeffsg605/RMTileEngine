using System;
using System.Collections.Generic;
using System.Linq;

using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Content;

using RMTileEngine.World;

namespace RMTileEngine
{
	/// <summary>
	/// The primary class in the engine. It acts as a singleton.
	/// </summary>
	public class TileEngine
	{
		/// <summary>
		/// The variable that keeps track of the current active instance. Used to keep the TileEngine class as a singleton.
		/// </summary>
		internal static TileEngine GlobalInstance;
		/// <summary>
		/// The game that is using this instance of the Tile Engine.
		/// </summary>
		internal Game Game;
		/// <summary>
		/// The primary tilemap being used by the engine and the game is belongs to.
		/// </summary>
		public TileMap PrimaryTileMap
		{
			get;
			internal set;
		}
		/// <summary>
		/// The secondary Tilemap being used by the engine. It is useful for rapid loading/swaping of maps, or in a case where
		/// the game requires that 2 tile maps be loaded and updating at the same time. Warning: using a secondary TileMap can
		/// reduce performance of the game due to memory usage.
		/// </summary>
		public TileMap BufferedTileMap
		{
			get;
			internal set;
		}
		/// <summary>
		/// This will override any attempt to wipe the buffered TileMap from memory.
		/// </summary>
		public bool ForcePersistantBufferedMap = false;
		/// <summary>
		/// The path in which to save the TileMaps to.
		/// </summary>
		public string SavePath = "";
		/// <summary>
		/// The path to the folder that contains the tile textures.
		/// </summary>
		public string TexturePath = "";

		/// <summary>
		/// If instance of the tileengine has been initialized.
		/// </summary>
		private bool initialized = false;

		/// <summary>
		/// Constructor only checks to make sure that and instance doesn't already exist. All of the actual creation and initialization
		/// is done by the Initialize method, usually called directly after the constructor.
		/// </summary>
		public TileEngine()
		{
			if (GlobalInstance != null)
				throw new RMTEException("You can only have one instance of the Tile Engine per game.");

			GlobalInstance = this;
		}

		/// <summary>
		/// Handles the actual initialization of the engine, and creation of the various fields in the engine.
		/// </summary>
		/// <param name="game">The game this is using this instance of the Engine.</param>
		/// <param name="savePath">The path in which to save the TileMaps generated by the engine.</param>
		/// <param name="texturePath">The path to the folder that contains the tile textures.</param>
		public void Initialize(Game game, string savePath, string texturePath)
		{
			this.Game = game;
			this.SavePath = savePath;
			this.TexturePath = texturePath;

			this.initialized = true;
		}

		/// <summary>
		/// Called once a frame to update the engine.
		/// </summary>
		/// <param name="gameTime">Snapshot of game timing values.</param>
		public void Update(GameTime gameTime)
		{

		}

		/// <summary>
		/// Called once per frame to draw the various engine components.
		/// </summary>
		/// <param name="sBatch">The spritebatch to draw the graphics with.</param>
		public void Draw(SpriteBatch sBatch)
		{

		}

		/// <summary>
		/// Swaps out the buffered tilemap with the primary one, and discards the old primary if required. If the 
		/// buffered tilemap is null, it throws an exception. The forcePersistantBufferedMap variable will always override
		/// the save parameter. Warning: this method can take a while to complete depending on system specs and 
		/// map size.
		/// </summary>
		/// <param name="save">Whether or not to save the old primary TileMap after the swap is complete.</param>
		public void SwapTileMaps(bool save)
		{
			checkIfInitialized();

			if (BufferedTileMap == null)
				throw new RMTEException("There is no buffered map that can be swapped to the active map.");
			//TODO implement map swaping
		}

		//TODO Implement functions to get various sub-components (i.e: textures, Tiles)

		private void checkIfInitialized()
		{
			if (!this.initialized)
				throw new RMTEException("You cannot modify the TileEngine before it is initialized! Initialize the engine first by calling .Initialize()");
		}
	}
}